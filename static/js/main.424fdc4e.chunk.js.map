{"version":3,"sources":["components/Scaffold.tsx","components/Header.tsx","components/Chart.tsx","api/index.ts","api/Cases.ts","api/API.ts","components/Main.tsx","hooks/useData.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["MEDIA","GlobalStyles","createGlobalStyle","Container","styled","div","Row","Heading","header","Header","className","Chart","data","chartRef","createRef","useEffect","mounted","chart","current","getContext","maleCount","femaleCount","forEach","result","date","monthIdx","getMonth","gender","ChartJS","type","labels","slice","Date","datasets","label","backgroundColor","borderColor","fill","options","legend","fontColor","scales","yAxes","ticks","beginAtZero","xAxes","id","ref","cases","this","get","results","confirmed","recovered","died","map","status","caseNo","case_no","age","nationality","admittedHospital","hospital_admitted_to","hasTravelledAbroad","had_recent_travel_history_abroad","otherInfo","other_information","total","confirmed_cases","negative","cases_tested_negative","pending","cases_pending_test_results","count","reduce","acc","cur","current_pui_status","suspected_cases","region","suspected","baseUrl","endpoint","headers","url","trimStart","config","extend","axios","response","Promise","reject","Card","CountStyled","span","Main","useState","setData","setCount","a","all","state","useData","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.424fdc4e.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from \"styled-components\";\n\nexport const MEDIA = {\n  mobile: \"@media screen and (max-width: 500px)\"\n};\n\nexport const GlobalStyles = createGlobalStyle`\n  html {\n    box-sizing: border-box;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n    -webkit-tap-highlight-color: transparent;\n  }\n\n  body {\n    background: #252C45;\n    color: #D9EEFF;\n    font-family: -apple-system, BlinkMacSystemFont, 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  }\n`;\n\nexport const Container = styled.div`\n  position: relative;\n  max-width: 1000px;\n  margin: 0 auto;\n`;\n\nexport const Row = styled.div`\n  display: flex;\n\n  ${MEDIA.mobile} {\n    flex-direction: column;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Container } from \"./Scaffold\";\n\nconst Heading = styled.header`\n  text-align: center;\n`;\n\nexport default function Header() {\n  return (\n    <Container>\n      <Heading>\n        <h1 className=\"logo\">PH COVID-19 Tracker</h1>\n      </Heading>\n    </Container>\n  );\n}\n","import React, { createRef, useEffect } from \"react\";\nimport ChartJS from \"chart.js\";\nimport { CaseDataProps } from \"../interfaces\";\n\nexport default function Chart({ data }: CaseDataProps) {\n  const chartRef = createRef<HTMLCanvasElement>();\n\n  useEffect(() => {\n    let mounted = true;\n\n    if (mounted) {\n      const chart = chartRef.current?.getContext(\"2d\");\n      const labels = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\"\n      ];\n\n      const maleCount = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      const femaleCount = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n      data.forEach(result => {\n        const date = result.date;\n        if (date) {\n          const monthIdx = date.getMonth();\n\n          if (result.gender === \"F\") {\n            femaleCount[monthIdx]++;\n          } else {\n            maleCount[monthIdx]++;\n          }\n        }\n      });\n\n      if (chart) {\n        new ChartJS(chart, {\n          type: \"line\",\n          data: {\n            //Bring in data\n            labels: labels.slice(0, new Date().getMonth() + 1),\n            datasets: [\n              {\n                label: \"Men\",\n                data: maleCount,\n                backgroundColor: \"#afeeee\",\n                borderColor: \"#afeeee\",\n                fill: false\n              },\n              {\n                label: \"Female\",\n                data: femaleCount,\n                backgroundColor: \"#ffc0cb\",\n                borderColor: \"#ffc0cb\",\n                fill: false\n              }\n            ]\n          },\n          options: {\n            legend: {\n              labels: {\n                fontColor: \"#D9EEFF\"\n              }\n            },\n            scales: {\n              yAxes: [\n                {\n                  ticks: {\n                    fontColor: \"#D9EEFF\",\n                    beginAtZero: true\n                  }\n                }\n              ],\n              xAxes: [\n                {\n                  ticks: {\n                    fontColor: \"#D9EEFF\",\n                    beginAtZero: true\n                  }\n                }\n              ]\n            }\n          }\n        });\n      }\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, [chartRef, data]);\n\n  return <canvas id=\"chart\" ref={chartRef} />;\n}\n","import Cases from \"./Cases\";\n\nexport const cases = new Cases();\n","import API from \"./API\";\n\ninterface CaseResultValue {\n  case_no: number;\n  date: Date | string;\n  age: number;\n  gender: string;\n  nationality: string;\n  hospital_admitted_to: string;\n  had_recent_travel_history_abroad: string;\n  status: string;\n  other_information: string;\n}\n\ninterface SuspectedResultValue {\n  confirmed_cases: number;\n  cases_tested_negative: number;\n  cases_pending_test_results: number;\n}\n\ninterface PUIResultValue {\n  region: string;\n  current_pui_status: {\n    suspected_cases: {\n      admitted: number;\n      deaths: number;\n    };\n\n    confirmed_cases: {\n      admitted: number;\n      recoveries: number;\n      death: number;\n    };\n  };\n  total: number;\n}\n\nexport default class Cases extends API {\n  async all() {\n    const results = await this.get(\"cases\");\n\n    let confirmed = 0;\n    let recovered = 0;\n    let died = 0;\n\n    const data = results.map((result: CaseResultValue) => {\n      confirmed++;\n\n      if (result.status === \"Died\") {\n        died++;\n      }\n\n      if (result.status === \"Recovered\") {\n        recovered++;\n      }\n\n      return {\n        caseNo: result.case_no,\n        date: result.date !== \"For Validation\" ? new Date(result.date) : null,\n        age: result.age,\n        gender: result.gender,\n        nationality: result.nationality,\n        admittedHospital: result.hospital_admitted_to,\n        hasTravelledAbroad: result.had_recent_travel_history_abroad === \"Yes\",\n        status: result.status,\n        otherInfo: result.other_information\n      };\n    });\n\n    return {\n      total: {\n        confirmed,\n        recovered,\n        died\n      },\n      results: data\n    };\n  }\n\n  async tests() {\n    const result: SuspectedResultValue = await this.get(\"test-results\");\n\n    return {\n      confirmed: result.confirmed_cases,\n      negative: result.cases_tested_negative,\n      pending: result.cases_pending_test_results\n    };\n  }\n\n  async pui() {\n    const results = await this.get(\"patients-under-investigation\");\n    const count: number = results.reduce((acc: any, cur: { total: number }) => {\n      return acc + cur.total;\n    });\n\n    return {\n      count,\n      results: results.map((result: PUIResultValue) => {\n        const {\n          current_pui_status: { suspected_cases, confirmed_cases }\n        } = result;\n\n        return {\n          region: result.region,\n          suspected: suspected_cases,\n          confirmed: confirmed_cases\n        };\n      })\n    };\n  }\n}\n","import axios from \"axios\";\nimport { extend, trimStart } from \"lodash\";\n\nexport default class API {\n  baseUrl = \"https://coronavirus-ph-api.now.sh/\";\n\n  async get(endpoint: string, headers?: object) {\n    const url = this.baseUrl + trimStart(endpoint, \"/\");\n    const config = {\n      headers: extend({}, headers)\n    };\n    try {\n      const response = await axios.get(url, config);\n      return response.data;\n    } catch (exception) {\n      return Promise.reject(exception);\n    }\n  }\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport Chart from \"./Chart\";\nimport { MEDIA, Container, Row } from \"./Scaffold\";\nimport useData from \"../hooks/useData\";\n\nconst Card = styled.div`\n  flex: 1;\n  background: #282e49;\n  border: 1px solid rgb(24, 27, 46);\n  margin: 0 16px 12px;\n  padding: 2em;\n  text-align: center;\n\n  &:first-child {\n    margin-left: 0;\n  }\n  &:last-child {\n    margin-right: 0;\n  }\n\n  h2 {\n    margin: 0;\n  }\n\n  ${MEDIA.mobile} {\n    margin: 0 12px 24px 12px !important;\n  }\n`;\n\nconst CountStyled = styled.span`\n  display: inline-block;\n  font-size: 2em;\n  margin-top: 12px;\n\n  &.success {\n    color: rgb(16, 220, 160);\n  }\n  &.warning {\n    color: #f5f5dc;\n  }\n  &.danger {\n    color: rgb(255, 106, 158);\n  }\n`;\n\nexport default function Main() {\n  const { count, data } = useData();\n\n  return (\n    <Container>\n      <Row>\n        <Card>\n          <h2>Confirmed</h2>\n          <CountStyled className=\"warning\">{count.confirmed}</CountStyled>\n        </Card>\n        <Card>\n          <h2>Died</h2>\n          <CountStyled className=\"danger\">{count.died}</CountStyled>\n        </Card>\n        <Card>\n          <h2>Recovered</h2>\n          <CountStyled className=\"success\">{count.recovered}</CountStyled>\n        </Card>\n      </Row>\n\n      <Row>\n        <Card>\n          <Chart data={data} />\n        </Card>\n      </Row>\n    </Container>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { cases } from \"../api\";\n\nexport default function useData() {\n  const [data, setData] = useState([]);\n  const [count, setCount] = useState({\n    confirmed: 0,\n    died: 0,\n    recovered: 0\n  });\n\n  useEffect(() => {\n    let mounted = true;\n\n    if (mounted) {\n      (async () => {\n        const data = await cases.all();\n\n        setData(data.results);\n        setCount(state => ({ ...state, ...data.total }));\n      })();\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return {\n    data,\n    count\n  };\n}\n","import React from \"react\";\n\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport { GlobalStyles } from \"./components/Scaffold\";\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyles />\n      <Header />\n      <Main />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"normalize.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}